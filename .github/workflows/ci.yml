name: Bank of Canada MLOps Platform CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality checks
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 api/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 api/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check api/
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short
      continue-on-error: true

  # Build and test Docker images
  docker-build:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    strategy:
      matrix:
        service: [api, web, workers]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build ${{ matrix.service }}
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile
        push: false
        tags: bankcanada-${{ matrix.service }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Documentation check
  docs-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation files
      run: |
        echo "Checking required documentation..."
        test -f README.md
        test -f docs/INTERVIEW_GUIDE.md
        test -f DOCKER_SETUP.md
        echo "✅ All documentation files present"
    
    - name: Validate docker-compose
      run: |
        docker-compose config

  # Integration test with Docker Compose
  integration-test:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create test environment file
      run: |
        cp env.example .env
        echo "ANTHROPIC_API_KEY=test_key" >> .env
    
    - name: Start services
      run: |
        docker-compose up -d postgres redis
        sleep 30
        docker-compose up -d mlflow
        sleep 15
        docker-compose up -d api
        sleep 10
    
    - name: Test API health
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        echo "✅ API is healthy"
    
    - name: Test MLflow health
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'
        echo "✅ MLflow is healthy"
      continue-on-error: true
    
    - name: Show logs on failure
      if: failure()
      run: |
        docker-compose logs
    
    - name: Cleanup
      run: |
        docker-compose down -v
